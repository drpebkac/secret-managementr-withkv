name: deploy

on:
  workflow_call:
    inputs:
      environment:
        description: "github environment for deployment jobs"
        type: string
        required: true
      location:
        description: "location for resource deployment"
        type: string
        required: true
      deployment_name:
        description: "name of the arm deployment"
        type: string
        required: true
      inline_params:
        description: "string representation of additional parameters, refer to https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/deploy-cli#parameters"
        type: string
        required: false
        default: ""
      az_deployment_type:
        description: "type of azure deployment"
        type: string
        required: false
        default: subscription
      mode:
        description: "the contextual mode of the deployment, either deploy or operations"
        type: string
        required: false
        default: deploy
      management_group_id:
        description: "management group id for azure deployment"
        type: string
        required: false
        default: ""
      resource_group_name:
        description: "resource group name for azure deployment"
        type: string
        required: false
        default: ""

jobs: 
  run_preview:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Set current date as environment variable
        run: echo "current_time=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV
        shell: bash

      - name: Checkout
        uses: actions/checkout@v3.3.0

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
          path: ${{ runner.workspace }}/deploy

      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}

      - name: What-If Deploy to Azure (Operations)
        if: inputs.mode == 'operations'
        run: |
          $ErrorActionPreference = 'stop'
          $files = Get-ChildItem ${{ runner.workspace }}/deploy | Where-Object {$_.Name -like "*.json"}
          $files
            if ('${{ inputs.az_deployment_type }}' -eq "subscription" ){
          az account set --subscription ${{ secrets.SUBSCRIPTION_ID }}
            az deployment sub what-if `
              --name '${{ inputs.deployment_name }}-${{ env.current_time }}' `
              --location '${{ inputs.location }}' `
              --subscription ${{ secrets.SUBSCRIPTION_ID }} `
              --template-file ${{ runner.workspace }}/deploy/main.json --parameters ${{ runner.workspace }}/deploy/parameters.json
          }
          if ('${{ inputs.az_deployment_type }}' -eq "tenant" ){
            az deployment tenant what-if `
              --name '${{ inputs.deployment_name }}-${{ env.current_time }}' `
              --location '${{ inputs.location }}' `
              --template-file ${{ runner.workspace }}/deploy/main.json --parameters ${{ runner.workspace }}/deploy/parameters.json
          }
          if ('${{ inputs.az_deployment_type }}' -eq "managementgroup" ){
            az deployment mg what-if `
              --name '${{ inputs.deployment_name }}-${{ env.current_time }}' `
              --location '${{ inputs.location }}' `
              --management-group-id '${{ inputs.management_group_id }}' `
              --template-file ${{ runner.workspace }}/deploy/main.json --parameters ${{ runner.workspace }}/deploy/parameters.json
          }
          if ('${{ inputs.az_deployment_type }}' -eq "resourcegroup" ){
            az account set --subscription '${{ inputs.subscription_id }}'
            az deployment group what-if `
              --name '${{ inputs.deployment_name }}-${{ env.current_time }}' `
              --resource-group '${{ inputs.resource_group_name }}' `
              --template-file ${{ runner.workspace }}/deploy/main.json --parameters ${{ runner.workspace }}/deploy/parameters.json
            }
        shell: pwsh

      - name: What-If Deploy to Azure
        if: inputs.mode == 'deploy'
        run: |
          $ErrorActionPreference = 'stop'

          if ('${{ inputs.az_deployment_type }}' -eq "subscription" ){
            az account set --subscription ${{ secrets.SUBSCRIPTION_ID }}
            az deployment sub what-if `
              --name '${{ inputs.deployment_name }}-${{ env.current_time }}' `
              --location '${{ inputs.location }}' `
              --subscription '${{ secrets.SUBSCRIPTION_ID }}' `
              --template-file ${{ runner.workspace }}/deploy/main.json --parameters parameters.json
          }
          if ('${{ inputs.az_deployment_type }}' -eq "tenant" ){
            az deployment tenant what-if `
              --name '${{ inputs.deployment_name }}-${{ env.current_time }}' `
              --location '${{ inputs.location }}' `
              --template-file ${{ runner.workspace }}/deploy/main.json --parameters parameters.json
          }
          if ('${{ inputs.az_deployment_type }}' -eq "managementgroup" ){
            az deployment mg what-if `
              --name '${{ inputs.deployment_name }}-${{ env.current_time }}' `
              --location '${{ inputs.location }}' `
              --management-group-id '${{ inputs.management_group_id }}' `
              --template-file ${{ runner.workspace }}/deploy/main.json --parameters parameters.json
          }
            if ('${{ inputs.az_deployment_type }}' -eq "resourcegroup" ){
              az account set --subscription '${{ secrets.SUBSCRIPTION_ID }}'
              az deployment group what-if `
                --name '${{ inputs.deployment_name }}-${{ env.current_time }}' `
                --resource-group '${{ inputs.resource_group_name }}' `
              --template-file ${{ runner.workspace }}/deploy/main.json --parameters parameters.json
            }
        shell: pwsh

  run_deploy:
    needs: [run_preview]
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}
    steps:
      - name: Set current date as environment variable
        run: echo "current_time=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV
        shell: bash
        
      - name: Checkout
        uses: actions/checkout@v3.3.0

      - name: Download Artifact
        uses: actions/download-artifact@v3.0.1
        with:
          name: deploy
          path: ${{ runner.workspace }}/deploy

      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}

      - name: Deploy to Azure (Operations)
        if: inputs.mode == 'operations'
        run: |
          $ErrorActionPreference = 'stop'
          if ('${{ inputs.az_deployment_type }}' -eq "subscription" ){
            $subId = '${{ secrets.SUBSCRIPTION_ID }}'
            az account set --subscription ${{ secrets.SUBSCRIPTION_ID }}
            az deployment sub create `
              --name '${{ inputs.deployment_name }}-${{ env.current_time }}' `
              --location '${{ inputs.location }}' `
              --subscription $subId `
              --template-file ${{ runner.workspace }}/deploy/main.json `
              --parameters parameters.json
          }
          if ('${{ inputs.az_deployment_type }}' -eq "tenant" ){
            az deployment tenant create `
              --name '${{ inputs.deployment_name }}-${{ env.current_time }}' `
              --location '${{ inputs.location }}' `
              --template-file ${{ runner.workspace }}/deploy/main.json `
              --parameters parameters.json
          }
          if ('${{ inputs.az_deployment_type }}' -eq "managementgroup" ){
          az deployment mg create `
            --name '${{ inputs.deployment_name }}-${{ env.current_time }}' `
            --location '${{ inputs.location }}' `
            --management-group-id '${{ inputs.management_group_id }}' `
            --template-file ${{ runner.workspace }}/deploy/main.json --parameters parameters.json
          }
          if ('${{ inputs.az_deployment_type }}' -eq "resourcegroup" ){
            az account set --subscription '${{ secrets.SUBSCRIPTION_ID }}'
            az deployment group create `
              --name '${{ inputs.deployment_name }}-${{ env.current_time }}' `
              --resource-group '${{ inputs.resource_group_name }}' `
              --template-file ${{ runner.workspace }}/deploy/main.json `
              --parameters parameters.json
          }
        shell: pwsh

      - name: Deploy to Azure
        if: inputs.mode == 'deploy'
        run: |
          $ErrorActionPreference = 'stop'
          if ('${{ inputs.az_deployment_type }}' -eq "subscription" ){
            az account set --subscription ${{ secrets.SUBSCRIPTION_ID }}'
            az deployment sub create `
              --name '${{ inputs.deployment_name }}_${{ env.current_time }}' `
              --location '${{ inputs.location }}' `
              --subscription '${{ secrets.SUBSCRIPTION_ID }}}' `
              --template-file ${{ runner.workspace }}/deploy/main.json `
              --parameters parameters.json
          }
          if ('${{ inputs.az_deployment_type }}' -eq "tenant" ){
            az deployment tenant create `
              --name '${{ inputs.deployment_name }}_${{ env.current_time }}' `
              --location '${{ inputs.location }}' `
              --template-file ${{ runner.workspace }}/deploy/main.json `
              --parameters parameters.json
          }
          if ('${{ inputs.az_deployment_type }}' -eq "managementgroup" ){
          az deployment mg create `
            --name '${{ inputs.deployment_name }}_${{ env.current_time }}' `
            --location '${{ inputs.location }}' `
            --management-group-id '${{ inputs.management_group_id }}' `
            --template-file ${{ runner.workspace }}/deploy/main.json `
            --parameters parameters.json
          }
          if ('${{ inputs.az_deployment_type }}' -eq "resourcegroup" ){
            az account set --subscription '${{ secrets.SUBSCRIPTION_ID }}''
            az deployment group create `
              --name '${{ inputs.deployment_name }}_${{ env.current_time }}' `
              --resource-group '${{ inputs.resource_group_name }}' `
              --template-file ${{ runner.workspace }}/deploy/main.json `
              --parameters parameters.json
          }
        shell: pwsh

      - name: Clean up runner
        run: |
          Remove-Item -Recurse -Force ${{ runner.workspace }}/deploy -verbose
