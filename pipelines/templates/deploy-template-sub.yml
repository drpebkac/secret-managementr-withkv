parameters:
  - name: stage # Stage Name
    type: string
  - name: dependsOn # Stage Dependencies
    type: string
  - name: condition # Stage Conditions
    type: string
  - name: adoEnvironment # Azure DevOps Environment for Deployment Jobs
    type: string
  - name: location # Where the deployment metadata will be saved
    type: string
    default: ""
  - name: subscriptionId # SubscriptionId to deploy to
    type: string
    default: ""
  - name: templateFileName # Name of the file (assume its a built bicep into json)
    type: string
    default: main.json
  - name: deploymentName # Name for ARM Deployment
    type: string
  - name: parameterFilePath # Path to Parameter File
    type: string
    default: ""
  - name: inlineParams # String representation of additional parameters. Refer https://docs.microsoft.com/en-us/azure/azure-resource-manager/templates/deploy-cli#parameters
    type: string
    default: ""
  - name: svcConnection # Service Connection
    type: string
  - name: previewChanges # Enable the whatif preview
    type: boolean
  - name: azDeploymentType # Type of Azure deployment
    type: string
    default: subscription
    values:
      - subscription
      - tenant
      - managementGroup
      - resourceGroup
  - name: mode # The contextual mode of the deployment. E.g. Whether it is part of the initial deployment or ongoing operations
    type: string
    default: deploy
    values:
      - deploy
      - operations
  - name: managementGroupId # Management Group Id to deploy to
    type: string
    default: ""
  - name: resourceGroupName # Name of resource group for RG deployments
    type: string
    default: ""

stages:
  - ${{ if eq(parameters.previewChanges, true) }}: # Conditionally insert stage
      - stage: Preview_${{ parameters.stage }}
        dependsOn: ${{ parameters.dependsOn }}
        condition: and( ${{ parameters.condition }}, ${{ parameters.previewChanges}} )
        jobs:
          - job: Preview_${{ parameters.stage }}
            steps:
              - checkout: self

              - download: current
                artifact: deploy

              - task: AzureCLI@2
                displayName: What-If Deploy to Azure (Operations)
                condition: eq('${{ parameters.mode }}', 'operations')
                inputs:
                  azureSubscription: ${{ parameters.svcConnection }}
                  scriptType: "pscore"
                  scriptLocation: "inlineScript"
                  inlineScript: |
                    $ErrorActionPreference = 'stop'
                    $files = Get-ChildItem $(Pipeline.Workspace)/deploy | Where-Object {$_.Name -like "*.parameters.json"}
                    $template = "${{ parameters.templateFileName }}".Replace(".bicep",".json")

                      foreach ($file in $files) {
                        if ('${{ parameters.azDeploymentType }}' -eq "subscription" ){
                          $paramFile = Get-Content $file.FullName | ConvertFrom-Json
                          $subId = $paramFile.parameters.subscriptionId.value
                          $location = $paramFile.parameters.location.value
                          az account set --subscription $subId

                          az deployment sub what-if `
                            --name '${{ parameters.deploymentName }}' `
                            --location $location `
                            --subscription $subId `
                            --template-file $(Pipeline.Workspace)/deploy/$template --parameters $file.FullName
                        }
                        if ('${{ parameters.azDeploymentType }}' -eq "tenant" ){
                          az deployment tenant what-if `
                            --name '${{ parameters.deploymentName }}' `
                            --location '${{ parameters.location }}' `
                            --template-file $(Pipeline.Workspace)/deploy/$template --parameters $file.FullName
                        }
                        if ('${{ parameters.azDeploymentType }}' -eq "managementGroup" ){
                          az deployment mg what-if `
                            --name '${{ parameters.deploymentName }}' `
                            --location '${{ parameters.location }}' `
                            --management-group-id '${{ parameters.managementGroupId }}' `
                            --template-file $(Pipeline.Workspace)/deploy/$template --parameters $file.FullName
                        }
                        if ('${{ parameters.azDeploymentType }}' -eq "resourceGroup" ){
                          $paramFile = Get-Content $file.FullName | ConvertFrom-Json
                          $subId = $paramFile.parameters.subscriptionId.value
                          az account set --subscription $subId

                          az deployment group what-if `
                            --name '${{ parameters.deploymentName }}' `
                            --resource-group '${{ parameters.resourceGroupName }}' `
                            --template-file $(Pipeline.Workspace)/deploy/$template --parameters $file.FullName
                        }
                      }

              - task: AzureCLI@2
                displayName: What-If Deploy to Azure
                condition: eq('${{ parameters.mode }}', 'deploy')
                inputs:
                  azureSubscription: ${{ parameters.svcConnection }}
                  scriptLocation: "inlineScript"
                  scriptType: "pscore"
                  inlineScript: |
                    $ErrorActionPreference = 'stop'
                    $paramFile = Get-ChildItem $(Pipeline.Workspace)/deploy | Where-Object {$_.Name -like "*.parameters.json"}
                    $template = "${{ parameters.templateFileName }}".Replace(".bicep",".json")

                    if ('${{ parameters.azDeploymentType }}' -eq "subscription" ){
                      az account set --subscription ${{ parameters.subscriptionId}}
                      az deployment sub what-if `
                        --name '${{ parameters.deploymentName }}' `
                        --location '${{ parameters.location }}' `
                        --subscription '${{ parameters.subscriptionId }}' `
                        --template-file $(Pipeline.Workspace)/deploy/$template --parameters $paramFile
                    }
                    if ('${{ parameters.azDeploymentType }}' -eq "tenant" ){
                      az deployment tenant what-if `
                        --name '${{ parameters.deploymentName }}' `
                        --location '${{ parameters.location }}' `
                        --template-file $(Pipeline.Workspace)/deploy/$template --parameters $paramFile
                    }
                    if ('${{ parameters.azDeploymentType }}' -eq "managementGroup" ){
                    az deployment mg what-if `
                      --name '${{ parameters.deploymentName }}' `
                      --location '${{ parameters.location }}' `
                      --management-group-id '${{ parameters.managementGroupId }}' `
                      --template-file $(Pipeline.Workspace)/deploy/$template --parameters $paramFile
                    }
                    if ('${{ parameters.azDeploymentType }}' -eq "resourceGroup" ){
                      az account set --subscription '${{ parameters.subscriptionId }}'
                      az deployment group what-if `
                        --name '${{ parameters.deploymentName }}' `
                        --resource-group '${{ parameters.resourceGroupName }}' `
                        --template-file $(Pipeline.Workspace)/deploy/$template --parameters $paramFile
                    }

  - stage: ${{ parameters.stage }}
    dependsOn:
      - ${{ parameters.dependsOn }}
      - ${{ if eq(parameters.previewChanges, true) }}: # Conditionally insert dependency
          - Preview_${{ parameters.stage }}
    condition: ${{ parameters.condition }}
    variables:
      - name: paramArgs # Generate parameter argument if needed
        ${{ if ne(parameters.parameterFilePath, '') }}:
          value: "--parameters '@${{ parameters.parameterFilePath }}' ${{ parameters.inlineParams}}"
        ${{ elseif ne(parameters.inlineParams, '') }}:
          value: "--parameters ${{ parameters.inlineParams}}"
        ${{ else }}:
          value: ""
    jobs:
      - deployment: ${{ parameters.stage }}
        displayName: ${{ parameters.stage }}
        pool:
          vmImage: ubuntu-latest
        environment: ${{ parameters.adoEnvironment }}
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self

                - download: current
                  artifact: deploy

                - task: AzureCLI@2
                  displayName: Deploy to Azure (Operations)
                  condition: eq('${{ parameters.mode }}', 'operations')
                  inputs:
                    azureSubscription: ${{ parameters.svcConnection }}
                    scriptType: "pscore"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      $ErrorActionPreference = 'stop'
                      $files = Get-ChildItem $(Pipeline.Workspace)/deploy | Where-Object {$_.Name -like "*.parameters.json"}
                      $template = "${{ parameters.templateFileName }}".Replace(".bicep",".json")

                      foreach ($file in $files) {
                        if ('${{ parameters.azDeploymentType }}' -eq "subscription" ){
                          $paramFile = Get-Content $file.FullName | ConvertFrom-Json
                          $subId = $paramFile.parameters.subscriptionId.value
                          $location = $paramFile.parameters.location.value
                          az account set --subscription $subId

                          az deployment sub create `
                            --name '${{ parameters.deploymentName }}' `
                            --location $location `
                            --subscription $subId `
                            --template-file $(Pipeline.Workspace)/deploy/$template --parameters $file.FullName
                        }
                        if ('${{ parameters.azDeploymentType }}' -eq "tenant" ){
                          az deployment tenant create `
                            --name '${{ parameters.deploymentName }}' `
                            --location '${{ parameters.location }}' `
                            --template-file $(Pipeline.Workspace)/deploy/$template --parameters $file.FullName
                        }
                        if ('${{ parameters.azDeploymentType }}' -eq "managementGroup" ){
                          az deployment mg create `
                            --name '${{ parameters.deploymentName }}' `
                            --location '${{ parameters.location }}' `
                            --management-group-id '${{ parameters.managementGroupId }}' `
                            --template-file $(Pipeline.Workspace)/deploy/$template --parameters $file.FullName
                        }
                        if ('${{ parameters.azDeploymentType }}' -eq "resourceGroup" ){
                          $paramFile = Get-Content $file.FullName | ConvertFrom-Json
                          $subId = $paramFile.parameters.subscriptionId.value
                          az account set --subscription $subId

                          az deployment group create `
                            --name '${{ parameters.deploymentName }}' `
                            --resource-group '${{ parameters.resourceGroupName }}' `
                            --template-file $(Pipeline.Workspace)/deploy/$template --parameters $file.FullName
                        }
                      }

                - task: AzureCLI@2
                  displayName: Deploy to Azure
                  condition: eq('${{ parameters.mode }}', 'deploy')
                  inputs:
                    azureSubscription: ${{ parameters.svcConnection }}
                    scriptType: "pscore"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      $ErrorActionPreference = 'stop'
                      $paramFile = Get-ChildItem $(Pipeline.Workspace)/deploy | Where-Object {$_.Name -like "*.parameters.json"}
                      $template = "${{ parameters.templateFileName }}".Replace(".bicep",".json")

                      if ('${{ parameters.azDeploymentType }}' -eq "subscription" ){
                        az account set --subscription ${{ parameters.subscriptionId}}
                        az deployment sub create `
                          --name '${{ parameters.deploymentName }}' `
                          --location '${{ parameters.location }}' `
                          --subscription '${{ parameters.subscriptionId }}' `
                          --template-file $(Pipeline.Workspace)/deploy/$template --parameters $paramFile
                      }
                      if ('${{ parameters.azDeploymentType }}' -eq "tenant" ){
                        az deployment tenant create `
                          --name '${{ parameters.deploymentName }}' `
                          --location '${{ parameters.location }}' `
                          --template-file $(Pipeline.Workspace)/deploy/$template --parameters $paramFile
                      }
                      if ('${{ parameters.azDeploymentType }}' -eq "managementGroup" ){
                      az deployment mg create `
                        --name '${{ parameters.deploymentName }}' `
                        --location '${{ parameters.location }}' `
                        --management-group-id '${{ parameters.managementGroupId }}' `
                        --template-file $(Pipeline.Workspace)/deploy/$template --parameters $paramFile
                      }
                      if ('${{ parameters.azDeploymentType }}' -eq "resourceGroup" ){
                        az account set --subscription '${{ parameters.subscriptionId }}'
                        az deployment group create `
                          --name '${{ parameters.deploymentName }}' `
                          --resource-group '${{ parameters.resourceGroupName }}' `
                          --template-file $(Pipeline.Workspace)/deploy/$template --parameters $paramFile
                      }