trigger:
  branches:
    include:
      - main
  paths:
    include:
      - function-apps/secrets-management/**/keyvault-reporting
      - function-apps/secrets-management/**/appreg-reporting
      - function-apps/secrets-management/*

parameters:
  - name: subscriptionId
    type: string
    default: '2203f013-1a68-42ec-9c0b-80346b7c1cdf'

  - name: functionAppName
    type: string
    default: 'shd-secrets-mgmt-func'

  - name: resourceGroupName
    type: string
    default: 'shd-secrets-management-rgp'

  - name: svcConnection
    type: string
    default: "rgp-coreservices-shd"

variables:
  vmImageName: ubuntu-latest
  adoEnvironment: "Secrets_Checker"
  deploymentName: "deploy_secrets_management_infra_$(Build.BuildNumber)"
  functionAppName: ${{parameters.functionAppName}}
  resourceGroupName: ${{parameters.resourceGroupName}}
  functionAppCodeDirectory: '$(System.DefaultWorkingDirectory)/function-apps/secrets-management'

stages:
  - stage: Build_Azure_Functions
    displayName: Build stage
    jobs:
    - job: Build
      displayName: Build
      pool:
        vmImage: $(vmImageName)
      steps:
      - powershell: |
          if (Test-Path "extensions.csproj") {
              dotnet build extensions.csproj --output ./$(functionAppCodeDirectory)/bin
          }
        displayName: 'Build extensions'
      - task: ArchiveFiles@2
        displayName: 'Archive files'
        inputs:
          rootFolderOrFile: $(functionAppCodeDirectory)
          includeRootFolder: false
          archiveType: zip
          archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fa.zip
          replaceExistingArchive: true
      - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fa.zip
        artifact: drop

  - stage: Deploy_Azure_Functions
    displayName: Deploy stage
    dependsOn: Build_Azure_Functions
    condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.Reason'], 'Manual')))
    jobs:
    - deployment: Deploy
      displayName: Deploy
      environment: $(adoEnvironment)
      pool:
        vmImage: $(vmImageName)
      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzureCLI@2
              displayName: 'Deploy Azure Function'
              inputs:
                azureSubscription: '${{parameters.svcConnection}}'
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  az account set --subscription ${{parameters.subscriptionId}}
                  az functionapp deployment source config-zip -g $(resourceGroupName) -n $(functionAppName) --src '$(Pipeline.Workspace)/drop/$(Build.BuildId)-fa.zip' --verbose